{"version":3,"file":"action-base.action.js","sourceRoot":"","sources":["../src/app/action-base.action.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs/observable';\r\nimport { Response } from '@angular/http';\r\n\r\nimport { Action } from 'angular-actions';\r\nimport { ValidationContext } from 'angular-rules-engine';\r\nimport { ServiceMessage } from 'angular-rules-engine';\r\nimport { MessageType } from 'angular-rules-engine';\r\nimport { ServiceContext } from 'angular-rules-engine';\r\nimport { ActionResult } from 'angular-actions';\r\nimport { CompositeRule } from 'angular-rules-engine';\r\nimport { RuleResult } from 'angular-rules-engine';\r\n\r\nimport { LoggingService } from 'buildmotion-logging';\r\nimport { Severity } from 'buildmotion-logging';\r\nimport { HttpBaseService } from './http-base.service';\r\nimport { ErrorResponse } from './models/error-response.model';\r\nimport { ServiceError } from './models/service-error.model';\r\n\r\n/**\r\n * This is the application's base Action class that provides implementation of pipeline methods - pre/post\r\n * execution methods.\r\n *\r\n * The pre-execute methods that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution methods that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\n\r\nexport class ActionBase extends Action {\r\n    serviceContext: ServiceContext;\r\n    response: Observable<any>;\r\n    httpBase: HttpBaseService;\r\n    loggingService: LoggingService;\r\n    actionName: string;\r\n\r\n    /**\r\n     * This is a required implementation if you want to render/execute the rules that \r\n     * are associated to the specified action.\r\n     */\r\n    validateAction(): ValidationContext {\r\n        return this.validationContext.renderRules();\r\n    }\r\n\r\n    postValidateAction() {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Preparing to determine if the action contains validation errors in ${this.actionName}`);\r\n\r\n        if (this.validationContext.hasRuleViolations()) {\r\n            this.loggingService.log(this.actionName, Severity.Information, `The target contains validation errors in ${this.actionName}`);\r\n\r\n            // Load the error/rule violations into the ServiceContext so that the information bubbles up to the caller of the service;\r\n            this.validationContext.results.forEach((result) => {\r\n                if (!result.isValid) {\r\n                    this.publishRuleResult(result);\r\n                    this.retrieveRuleDetails(result);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    postExecuteAction() {\r\n        if (this.actionResult === ActionResult.Fail) {\r\n            this.serviceContext.Messages.forEach((e) => {\r\n                if (e.MessageType === MessageType.Error) {\r\n                    this.loggingService.log(this.actionName, Severity.Error, e.toString());\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * All concrete actions must override and implement this method. It is defined in the [Action] framework class.\r\n    */\r\n    validateActionResult(): ActionResult {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Running [validateActionResult] for ${this.actionName}.`);\r\n        // determine the status of the action based on any rule violations;\r\n        if (this.validationContext.hasRuleViolations()) {\r\n            this.loggingService.log(this.actionName, Severity.Error, `The ${this.actionName} contains rule violations.`);\r\n            this.actionResult = ActionResult.Fail;\r\n\r\n            let errorResponse = new ErrorResponse();\r\n            errorResponse.IsSuccess = false;\r\n            errorResponse.Message = `Validation errors exist.`;\r\n            this.response = Observable.throw(errorResponse);\r\n        }\r\n        this.actionResult = this.serviceContext.isGood() ? ActionResult.Success : ActionResult.Fail;\r\n        return this.actionResult;\r\n    }\r\n\r\n    /**\r\n     * Use to process rule results for composite rules. Note, that this function is recursive\r\n     * and will process all composite rules in the rule set contained in the ValidationContext.\r\n     * @param ruleResult: the result of a rendered rule.\r\n     */\r\n    retrieveRuleDetails(ruleResult: RuleResult) {\r\n        if (ruleResult.rulePolicy instanceof CompositeRule) {\r\n            let composite = ruleResult.rulePolicy as CompositeRule;\r\n            if (composite && composite.hasErrors) {\r\n                let errors = composite.results.filter(result => !result.isValid && result.rulePolicy.isDisplayable);\r\n\r\n                errors.forEach(errorResult => {\r\n                    this.publishRuleResult(errorResult);\r\n\r\n                    if (errorResult.rulePolicy instanceof CompositeRule) {\r\n                        this.retrieveRuleDetails(errorResult);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A helper function to publish a new [ServiceMessage] to the [ServiceContext.Messages] list.\r\n     * @param ruleResult\r\n     */\r\n    publishRuleResult(ruleResult: RuleResult) {\r\n        let serviceMessage = new ServiceMessage(ruleResult.rulePolicy.name, ruleResult.rulePolicy.message, MessageType.Error);\r\n        serviceMessage.DisplayToUser = ruleResult.rulePolicy.isDisplayable;\r\n        serviceMessage.Source = this.actionName;\r\n        this.serviceContext.Messages.push(serviceMessage);\r\n        this.loggingService.log(this.actionName, Severity.Error, `${serviceMessage.toString()}`);\r\n    }\r\n}\r\n"]}