{"version":3,"file":"service-base.service.js","sourceRoot":"","sources":["../src/app/service-base.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { RequestOptions, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/observable';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { LoggingService } from '@buildmotion/logging';\r\nimport { MessageType } from 'angular-rules-engine';\r\nimport { ServiceContext } from 'angular-rules-engine';\r\nimport { ServiceMessage } from 'angular-rules-engine';\r\nimport { Severity } from '@buildmotion/logging';\r\nimport { ErrorResponse } from './models/error-response.model';\r\nimport { ServiceError } from './models/service-error.model';\r\nimport { OAuthErrorResponse } from './models/oauth-error-response.model';\r\n\r\n/**\r\n * Use this class as a base for application [services]. Add and/or implement\r\n * common behavior. For example, this base service class will \r\n * always initialize a new [ServiceContext] for the specified service \r\n * instance.\r\n */\r\nexport class ServiceBase {\r\n    serviceInitDateTime: Date = new Date();\r\n\r\n    /**\r\n     * Use this public property to set/retrieve the user's\r\n     * security token. Most of the web api calls will require an\r\n     * authorization token for the authenticated user.\r\n     */\r\n    accessToken: string = '';\r\n    serviceName: string;\r\n    serviceContext: ServiceContext = new ServiceContext();\r\n\r\n    constructor(public loggingService: LoggingService) {\r\n    }\r\n\r\n    extractData(res: Response) {\r\n        const body = res.json();\r\n        return body.data || {};\r\n    }\r\n\r\n     /**\r\n     * Use to handle an unexpected error in the application. The error should implement \r\n     * the specified interface. The method will add a new [ServiceMessage] to the \r\n     * specified [ServiceContext].\r\n     * @param error An unexpected application error that implements the [Error] interface.\r\n     * \r\n     * interface Error {\r\n     *  name: string;\r\n     *  message: string;\r\n     *  stack?: string;\r\n     * }\r\n     */\r\n    handleUnexpectedError(error: Error): void {\r\n        let message = new ServiceMessage(error.name, error.message)\r\n            .WithDisplayToUser(true)\r\n            .WithMessageType(MessageType.Error)\r\n            .WithSource(this.serviceName);\r\n\r\n        const logItem = `${message.toString()}; ${error.stack}`;\r\n        this.loggingService.log(this.serviceName, Severity.Error, logItem);\r\n\r\n        this.serviceContext.addMessage(message);\r\n    }\r\n\r\n    /**\r\n     * Use this method to handle an error from the OAuth Provider API. \r\n     * @param error\r\n     * @param requestOptions \r\n     */\r\n    handleOAuthError(error: OAuthErrorResponse, requestOptions: RequestOptions): Observable<Response> {\r\n        let message = `${error.toString()} ${requestOptions.url}, ${JSON.stringify(requestOptions.body)}`;\r\n        this.loggingService.log(this.serviceName, Severity.Error, message);\r\n        if (error && error._body) {\r\n            try {\r\n                let response = this.createErrorResponse(`Unable to validate credentials.`);\r\n                let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n                return subject.asObservable();\r\n            } catch (e) {\r\n                this.loggingService.log(this.serviceName, Severity.Error, e.toString());\r\n            }\r\n        }\r\n\r\n        // default return behavior;\r\n        let response = this.createErrorResponse(`Unable to validate credentials.`);\r\n        let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n        return subject.asObservable();\r\n    }\r\n\r\n    createErrorResponse(message: string): ErrorResponse {\r\n        const response: ErrorResponse = new ErrorResponse();\r\n        response.Message = message;\r\n        return response;\r\n    }\r\n\r\n    finishRequest(sourceName: string): void {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Request for [${sourceName}] by ${this.serviceName} is complete.`);\r\n        if (this.serviceContext.hasErrors()) {\r\n            this.loggingService.log(this.serviceName, Severity.Information, `Preparing to write out the errors.`);\r\n            this.serviceContext.Messages.filter(f => f.MessageType === MessageType.Error && f.DisplayToUser)\r\n                .forEach(e => this.loggingService.log(this.serviceName, Severity.Error, e.toString()));\r\n        }\r\n    }\r\n}\r\n"]}