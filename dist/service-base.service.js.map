{"version":3,"file":"service-base.service.js","sourceRoot":"","sources":["../src/app/service-base.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { RequestOptions, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { LoggingService } from 'buildmotion-logging/logging.service';\r\nimport { MessageType } from 'angular-rules-engine/service/MessageType';\r\nimport { ServiceContext } from 'angular-rules-engine/service/ServiceContext';\r\nimport { ServiceMessage } from 'angular-rules-engine/service/ServiceMessage';\r\nimport { Severity } from 'buildmotion-logging/severity.enum';\r\nimport { ErrorResponse } from './models/error-response.model';\r\nimport { ServiceError } from './models/service-error.model';\r\n\r\n/**\r\n * Use this class as a base for application [services]. Add and/or implement\r\n * common behavior. For example, this base service class will \r\n * always initialize a new [ServiceContext] for the specified service \r\n * instance.\r\n */\r\nexport class ServiceBase {\r\n    serviceInitDateTime: Date = new Date();\r\n\r\n    /**\r\n     * Use this public property to set/retrieve the user's\r\n     * security token. Most of the web api calls will require an\r\n     * authorization token for the authenticated user.\r\n     */\r\n    accessToken: string = '';\r\n    serviceName: string;\r\n    serviceContext: ServiceContext = new ServiceContext();\r\n\r\n    constructor(public loggingService: LoggingService) {\r\n    }\r\n\r\n    extractData(res: Response) {\r\n        const body = res.json();\r\n        return body.data || {};\r\n    }\r\n\r\n    handleError(error): void {\r\n        let message = new ServiceMessage(error.name, error.message)\r\n            .WithDisplayToUser(true)\r\n            .WithMessageType(MessageType.Error)\r\n            .WithSource(this.serviceName);\r\n\r\n        this.loggingService.log(this.serviceName, Severity.Error, message.toString());\r\n\r\n        this.serviceContext.Messages.forEach(e => {\r\n            if (e.MessageType === MessageType.Error && e.DisplayToUser) {\r\n                this.loggingService.log(this.serviceName, Severity.Error, e.toString());\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n        * Use to handle HTTP errors when calling web api(s).\r\n        */\r\n    handleHttpError(error, requestOptions: RequestOptions): Observable<Response> {\r\n        let message = `${error.toString()} ${requestOptions.url}, ${JSON.stringify(requestOptions.body)}`;\r\n        this.loggingService.log(this.serviceName, Severity.Error, message);\r\n        if (error && error._body) {\r\n            try {\r\n                let response: ErrorResponse = error.json();\r\n                let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n                return subject.asObservable();\r\n            } catch (error) {\r\n                this.loggingService.log(this.serviceName, Severity.Error, error.toString());\r\n            }\r\n        }\r\n\r\n        // default return behavior;\r\n        let response = this.createErrorResponse('Unexpected error while processing response.');\r\n        let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n        return subject.asObservable();\r\n    }\r\n\r\n    handleOAuthError(error, requestOptions: RequestOptions): Observable<Response> {\r\n        let message = `${error.toString()} ${requestOptions.url}, ${JSON.stringify(requestOptions.body)}`;\r\n        this.loggingService.log(this.serviceName, Severity.Error, message);\r\n        if (error && error._body) {\r\n            try {\r\n                let response = this.createErrorResponse(`Unable to validate credentials.`);\r\n                let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n                return subject.asObservable();\r\n            } catch (e) {\r\n                this.loggingService.log(this.serviceName, Severity.Error, e.toString());\r\n            }\r\n        }\r\n        \r\n        // default return behavior;\r\n        let response = this.createErrorResponse(`Unable to validate credentials.`);\r\n        let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n        return subject.asObservable();\r\n    }\r\n\r\n    createErrorResponse(message: string): ErrorResponse {\r\n        const response: ErrorResponse = new ErrorResponse();\r\n        response.Message = message;\r\n        return response;\r\n    }\r\n\r\n    finishRequest(sourceName: string): void {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Request for [${sourceName}] by ${this.serviceName} is complete.`);\r\n        if (this.serviceContext.hasErrors()) {\r\n            this.loggingService.log(this.serviceName, Severity.Information, `Preparing to write out the errors.`);\r\n            this.serviceContext.Messages.filter(f => f.MessageType === MessageType.Error && f.DisplayToUser)\r\n                .forEach(e => this.loggingService.log(this.serviceName, Severity.Error, e.toString()));\r\n        }\r\n    }\r\n}\r\n"]}