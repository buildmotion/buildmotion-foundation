{"version":3,"file":"http-base.service.js","sourceRoot":"","sources":["../src/app/http-base.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http, Request, RequestMethod, RequestOptions, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/observable';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { Severity } from 'buildmotion-logging/severity.enum';\r\nimport { LoggingService } from 'buildmotion-logging/logging.service';\r\nimport { ErrorResponse } from './models/error-response.model';\r\nimport { ServiceError } from './models/service-error.model';\r\n\r\n/**\r\n * Use to create and execute HTTP service requests.\r\n * 1. Create Headers\r\n * 2. Create RequestOptions\r\n * 3. Execute Request\r\n */\r\n@Injectable()\r\nexport class HttpBaseService {\r\n    serviceName: string = 'HttpBaseService';\r\n    accessToken: string;\r\n\r\n    constructor(\r\n        public http: Http,\r\n        public loggingService: LoggingService) {\r\n    }\r\n\r\n    /**\r\n     * Use to create a [Header] for [multipart/form-data].\r\n     */\r\n    createMultipartFormDataHeader(requiresAuthToken: boolean) {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to create header for the [multipart/form-data] HTTP request. RequiresAuthToken: ${requiresAuthToken}.`);\r\n        const headers = new Headers();\r\n        if (requiresAuthToken) {\r\n            // create header request with security token;\r\n            headers.append('Authorization', `Bearer ${this.accessToken}`);\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Use to create a [Header] for Content-Type [application/x-www-form-urlencoded]. \r\n     */\r\n    createFormUrlencodedHeader() {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to create header for the [application/x-www-form-urlencoded] HTTP request.`);\r\n        const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Use to create a [Header] for the HTTP request. If the [requiresAuthToken] indicator\r\n     * is true, the request will use the current Authorization security token.\r\n     * @param isSecure\r\n     */\r\n    createHeader(requiresAuthToken: boolean) {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to create header for the HTTP request. RequiresAuthToken: ${requiresAuthToken}.`);\r\n        const headers = new Headers({ 'Content-Type': 'application/json' });\r\n        if (requiresAuthToken) {\r\n            // create header request with security token;\r\n            headers.append('Authorization', `Bearer ${this.accessToken}`);\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Use to create a new instance of a [RequestOptions] object. \r\n     * See RequestOptions: https://angular.io/docs/ts/latest/api/http/index/RequestOptions-class.html \r\n     * See RequestMethod: https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html\r\n     */\r\n    createRequestOptions(method: RequestMethod, headers: Headers, url: string, body: any) {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to create request options for the HTTP request.`);\r\n        return new RequestOptions({\r\n            method: method,\r\n            headers: headers,\r\n            url: url,\r\n            body: body\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use to execute an HTTP request using the specified header and URL.\r\n     * See Request: https://angular.io/docs/ts/latest/api/http/index/Request-class.html\r\n     */\r\n    executeRequest(requestOptions: RequestOptions) {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Preparing to execute HTTP request. Url: ${requestOptions.url}, Method: ${requestOptions.method}`);\r\n        return this.http.request(new Request(requestOptions))\r\n            .map(response => response.json()) // maps the observable response to a JSON object;\r\n            .catch(error => this.handleHttpError(error, requestOptions)); // use to handle any exception during service call;\r\n            //.cache(); // use [cache] to eliminate possibility of duplicate calls;\r\n    }\r\n\r\n    /**\r\n     * Use to handle HTTP errors when calling web api(s).\r\n     */\r\n    handleHttpError(error: any, requestOptions: RequestOptions): Observable<Response> {\r\n        const message = `${error.toString()} ${requestOptions.url}, ${JSON.stringify(requestOptions.body)}`;\r\n        this.loggingService.log(this.serviceName, Severity.Error, message);\r\n        if (error && error._body) {\r\n            /**\r\n             * This is an error that contains a body - a [Response] from the application web api. Includes:\r\n             * 1. IsSuccess\r\n             * 2. Message\r\n             * 3. Array of ServiceError items\r\n             * 4. Exception (optional)\r\n             */\r\n            try {\r\n                let response: ErrorResponse = error.json();\r\n                if (response) {\r\n                    let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n                    return subject.asObservable();\r\n                } else {\r\n                    // TODO: RETRIEVE ERROR DETAILS; STATUS, MESSAGE; ETC. AND PROVIDE TO HANDLER;\r\n                    return this.handleUnexpectedError(error);\r\n                }\r\n            } catch (ex) {\r\n                const err = <Error>ex;\r\n                const errorMessage = `${err.name}; ${err.message}`;\r\n                this.loggingService.log(this.serviceName, Severity.Error, errorMessage);\r\n                return this.handleUnexpectedError(err);\r\n            }\r\n        } else {\r\n            return this.handleUnexpectedError(error);\r\n        }\r\n    }\r\n\r\n    handleUnexpectedError(error?: Error) {\r\n        let response = this.createErrorResponse(error);\r\n        let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n        return subject.asObservable();\r\n    }\r\n\r\n    createErrorResponse(error?: Error): ErrorResponse {\r\n        let message = 'Unexpected error while processing response.';\r\n        let response: ErrorResponse = new ErrorResponse();\r\n        if(error instanceof Error) {\r\n            message = `${error.name} - ${error.message}`;\r\n            response.Exception = error;\r\n        }\r\n        response.Message = message;\r\n        return response;\r\n    }\r\n}\r\n"]}