{"version":3,"file":"buildmotion-foundation.umd.js","sources":["../buildmotion-foundation.module.js","../models/error-response.model.js","../action-base.action.js","../business-provider-base.service.js","../http-base.service.js","../service-base.service.js","../models/service-error.model.js","../models/service-response.model.js"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BuildMotionLoggingModule } from 'buildmotion-logging';\r\nvar BuildMotionFoundationModule = (function () {\r\n    function BuildMotionFoundationModule() {\r\n    }\r\n    BuildMotionFoundationModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        BuildMotionLoggingModule\r\n                    ],\r\n                    declarations: []\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    BuildMotionFoundationModule.ctorParameters = function () { return []; };\r\n    return BuildMotionFoundationModule;\r\n}());\r\nexport { BuildMotionFoundationModule };\r\n//# sourceMappingURL=buildmotion-foundation.module.js.map","var ErrorResponse = (function () {\r\n    function ErrorResponse() {\r\n        this.IsSuccess = false;\r\n        this.Errors = new Array();\r\n    }\r\n    return ErrorResponse;\r\n}());\r\nexport { ErrorResponse };\r\n//# sourceMappingURL=error-response.model.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Observable } from 'rxjs/observable';\r\nimport { Action } from 'angular-actions';\r\nimport { ServiceMessage } from 'angular-rules-engine';\r\nimport { MessageType } from 'angular-rules-engine';\r\nimport { ActionResult } from 'angular-actions';\r\nimport { CompositeRule } from 'angular-rules-engine';\r\nimport { Severity } from 'buildmotion-logging';\r\nimport { ErrorResponse } from './models/error-response.model';\r\n/**\r\n * This is the application's base Action class that provides implementation of pipeline methods - pre/post\r\n * execution methods.\r\n *\r\n * The pre-execute methods that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution methods that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nvar /**\r\n * This is the application's base Action class that provides implementation of pipeline methods - pre/post\r\n * execution methods.\r\n *\r\n * The pre-execute methods that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution methods that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nActionBase = (function (_super) {\r\n    __extends(ActionBase, _super);\r\n    function ActionBase() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * This is a required implementation if you want to render/execute the rules that\r\n     * are associated to the specified action.\r\n     */\r\n    /**\r\n         * This is a required implementation if you want to render/execute the rules that\r\n         * are associated to the specified action.\r\n         */\r\n    ActionBase.prototype.validateAction = /**\r\n         * This is a required implementation if you want to render/execute the rules that\r\n         * are associated to the specified action.\r\n         */\r\n    function () {\r\n        return this.validationContext.renderRules();\r\n    };\r\n    ActionBase.prototype.postValidateAction = function () {\r\n        var _this = this;\r\n        this.loggingService.log(this.actionName, Severity.Information, \"Preparing to determine if the action contains validation errors in \" + this.actionName);\r\n        if (this.validationContext.hasRuleViolations()) {\r\n            this.loggingService.log(this.actionName, Severity.Information, \"The target contains validation errors in \" + this.actionName);\r\n            // Load the error/rule violations into the ServiceContext so that the information bubbles up to the caller of the service;\r\n            this.validationContext.results.forEach(function (result) {\r\n                if (!result.isValid) {\r\n                    _this.publishRuleResult(result);\r\n                    _this.retrieveRuleDetails(result);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    ActionBase.prototype.postExecuteAction = function () {\r\n        var _this = this;\r\n        if (this.actionResult === ActionResult.Fail) {\r\n            this.serviceContext.Messages.forEach(function (e) {\r\n                if (e.MessageType === MessageType.Error) {\r\n                    _this.loggingService.log(_this.actionName, Severity.Error, e.toString());\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n    * All concrete actions must override and implement this method. It is defined in the [Action] framework class.\r\n    */\r\n    /**\r\n        * All concrete actions must override and implement this method. It is defined in the [Action] framework class.\r\n        */\r\n    ActionBase.prototype.validateActionResult = /**\r\n        * All concrete actions must override and implement this method. It is defined in the [Action] framework class.\r\n        */\r\n    function () {\r\n        this.loggingService.log(this.actionName, Severity.Information, \"Running [validateActionResult] for \" + this.actionName + \".\");\r\n        // determine the status of the action based on any rule violations;\r\n        if (this.validationContext.hasRuleViolations()) {\r\n            this.loggingService.log(this.actionName, Severity.Error, \"The \" + this.actionName + \" contains rule violations.\");\r\n            this.actionResult = ActionResult.Fail;\r\n            var errorResponse = new ErrorResponse();\r\n            errorResponse.IsSuccess = false;\r\n            errorResponse.Message = \"Validation errors exist.\";\r\n            this.response = Observable.throw(errorResponse);\r\n        }\r\n        this.actionResult = this.serviceContext.isGood() ? ActionResult.Success : ActionResult.Fail;\r\n        return this.actionResult;\r\n    };\r\n    /**\r\n     * Use to process rule results for composite rules. Note, that this function is recursive\r\n     * and will process all composite rules in the rule set contained in the ValidationContext.\r\n     * @param ruleResult: the result of a rendered rule.\r\n     */\r\n    /**\r\n         * Use to process rule results for composite rules. Note, that this function is recursive\r\n         * and will process all composite rules in the rule set contained in the ValidationContext.\r\n         * @param ruleResult: the result of a rendered rule.\r\n         */\r\n    ActionBase.prototype.retrieveRuleDetails = /**\r\n         * Use to process rule results for composite rules. Note, that this function is recursive\r\n         * and will process all composite rules in the rule set contained in the ValidationContext.\r\n         * @param ruleResult: the result of a rendered rule.\r\n         */\r\n    function (ruleResult) {\r\n        var _this = this;\r\n        if (ruleResult.rulePolicy instanceof CompositeRule) {\r\n            var composite = ruleResult.rulePolicy;\r\n            if (composite && composite.hasErrors) {\r\n                var errors = composite.results.filter(function (result) { return !result.isValid && result.rulePolicy.isDisplayable; });\r\n                errors.forEach(function (errorResult) {\r\n                    _this.publishRuleResult(errorResult);\r\n                    if (errorResult.rulePolicy instanceof CompositeRule) {\r\n                        _this.retrieveRuleDetails(errorResult);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * A helper function to publish a new [ServiceMessage] to the [ServiceContext.Messages] list.\r\n     * @param ruleResult\r\n     */\r\n    /**\r\n         * A helper function to publish a new [ServiceMessage] to the [ServiceContext.Messages] list.\r\n         * @param ruleResult\r\n         */\r\n    ActionBase.prototype.publishRuleResult = /**\r\n         * A helper function to publish a new [ServiceMessage] to the [ServiceContext.Messages] list.\r\n         * @param ruleResult\r\n         */\r\n    function (ruleResult) {\r\n        var serviceMessage = new ServiceMessage(ruleResult.rulePolicy.name, ruleResult.rulePolicy.message, MessageType.Error);\r\n        serviceMessage.DisplayToUser = ruleResult.rulePolicy.isDisplayable;\r\n        serviceMessage.Source = this.actionName;\r\n        this.serviceContext.Messages.push(serviceMessage);\r\n        this.loggingService.log(this.actionName, Severity.Error, \"\" + serviceMessage.toString());\r\n    };\r\n    return ActionBase;\r\n}(Action));\r\n/**\r\n * This is the application's base Action class that provides implementation of pipeline methods - pre/post\r\n * execution methods.\r\n *\r\n * The pre-execute methods that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution methods that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\nexport { ActionBase };\r\n//# sourceMappingURL=action-base.action.js.map","import { ServiceMessage } from 'angular-rules-engine';\r\nimport { MessageType } from 'angular-rules-engine';\r\nimport { Severity } from 'buildmotion-logging';\r\n/**\r\n * Use the business provider base class to access common elements of the business provider.\r\n *\r\n * serviceContext: This is initialized for each instance of a business provider - its purpose is to collect information during the processing of business logic.\r\n */\r\nvar /**\r\n * Use the business provider base class to access common elements of the business provider.\r\n *\r\n * serviceContext: This is initialized for each instance of a business provider - its purpose is to collect information during the processing of business logic.\r\n */\r\nBusinessProviderBase = (function () {\r\n    function BusinessProviderBase(loggingService) {\r\n        this.loggingService = loggingService;\r\n        this.loggingService.log(this.serviceName, Severity.Information, \"Running constructor for the [BusinessProviderBase].\");\r\n    }\r\n    /**\r\n     * Use to handle an unexpected error in the application. The error should implement\r\n     * the specified interface. The method will add a new [ServiceMessage] to the\r\n     * specified [ServiceContext].\r\n     * @param error An unexpected application error that implements the [Error] interface.\r\n     *\r\n     * interface Error {\r\n     *  name: string;\r\n     *  message: string;\r\n     *  stack?: string;\r\n     * }\r\n     */\r\n    /**\r\n         * Use to handle an unexpected error in the application. The error should implement\r\n         * the specified interface. The method will add a new [ServiceMessage] to the\r\n         * specified [ServiceContext].\r\n         * @param error An unexpected application error that implements the [Error] interface.\r\n         *\r\n         * interface Error {\r\n         *  name: string;\r\n         *  message: string;\r\n         *  stack?: string;\r\n         * }\r\n         */\r\n    BusinessProviderBase.prototype.handleUnexpectedError = /**\r\n         * Use to handle an unexpected error in the application. The error should implement\r\n         * the specified interface. The method will add a new [ServiceMessage] to the\r\n         * specified [ServiceContext].\r\n         * @param error An unexpected application error that implements the [Error] interface.\r\n         *\r\n         * interface Error {\r\n         *  name: string;\r\n         *  message: string;\r\n         *  stack?: string;\r\n         * }\r\n         */\r\n    function (error) {\r\n        var message = new ServiceMessage(error.name, error.message)\r\n            .WithDisplayToUser(true)\r\n            .WithMessageType(MessageType.Error)\r\n            .WithSource(this.serviceName);\r\n        var logItem = message.toString() + \"; \" + error.stack;\r\n        this.loggingService.log(this.serviceName, Severity.Error, logItem);\r\n        this.serviceContext.addMessage(message);\r\n    };\r\n    BusinessProviderBase.prototype.finishRequest = function (sourceName) {\r\n        var _this = this;\r\n        this.loggingService.log(this.serviceName, Severity.Information, \"Request for [\" + sourceName + \"] by \" + this.serviceName + \" is complete.\");\r\n        if (this.serviceContext.hasErrors()) {\r\n            this.loggingService.log(this.serviceName, Severity.Information, \"Preparing to write out the errors.\");\r\n            this.serviceContext.Messages.filter(function (f) { return f.DisplayToUser && f.MessageType === MessageType.Error; })\r\n                .forEach(function (e) { return _this.loggingService.log(_this.serviceName, Severity.Error, e.toString()); });\r\n        }\r\n    };\r\n    return BusinessProviderBase;\r\n}());\r\n/**\r\n * Use the business provider base class to access common elements of the business provider.\r\n *\r\n * serviceContext: This is initialized for each instance of a business provider - its purpose is to collect information during the processing of business logic.\r\n */\r\nexport { BusinessProviderBase };\r\n//# sourceMappingURL=business-provider-base.service.js.map","import { Injectable } from '@angular/core';\r\nimport { Headers, Http, Request, RequestOptions } from '@angular/http';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\nimport { Severity } from 'buildmotion-logging/severity.enum';\r\nimport { LoggingService } from 'buildmotion-logging/logging.service';\r\nimport { ErrorResponse } from './models/error-response.model';\r\n/**\r\n * Use to create and execute HTTP service requests.\r\n * 1. Create Headers\r\n * 2. Create RequestOptions\r\n * 3. Execute Request\r\n */\r\nvar HttpBaseService = (function () {\r\n    function HttpBaseService(http, loggingService) {\r\n        this.http = http;\r\n        this.loggingService = loggingService;\r\n        this.serviceName = 'HttpBaseService';\r\n    }\r\n    /**\r\n     * Use to create a [Header] for [multipart/form-data].\r\n     */\r\n    /**\r\n         * Use to create a [Header] for [multipart/form-data].\r\n         */\r\n    HttpBaseService.prototype.createMultipartFormDataHeader = /**\r\n         * Use to create a [Header] for [multipart/form-data].\r\n         */\r\n    function (requiresAuthToken) {\r\n        this.loggingService.log(this.serviceName, Severity.Information, \"Preparing to create header for the [multipart/form-data] HTTP request. RequiresAuthToken: \" + requiresAuthToken + \".\");\r\n        var headers = new Headers();\r\n        if (requiresAuthToken) {\r\n            // create header request with security token;\r\n            headers.append('Authorization', \"Bearer \" + this.accessToken);\r\n        }\r\n        return headers;\r\n    };\r\n    /**\r\n     * Use to create a [Header] for Content-Type [application/x-www-form-urlencoded].\r\n     */\r\n    /**\r\n         * Use to create a [Header] for Content-Type [application/x-www-form-urlencoded].\r\n         */\r\n    HttpBaseService.prototype.createFormUrlencodedHeader = /**\r\n         * Use to create a [Header] for Content-Type [application/x-www-form-urlencoded].\r\n         */\r\n    function () {\r\n        this.loggingService.log(this.serviceName, Severity.Information, \"Preparing to create header for the [application/x-www-form-urlencoded] HTTP request.\");\r\n        var headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });\r\n        return headers;\r\n    };\r\n    /**\r\n     * Use to create a [Header] for the HTTP request. If the [requiresAuthToken] indicator\r\n     * is true, the request will use the current Authorization security token.\r\n     * @param isSecure\r\n     */\r\n    /**\r\n         * Use to create a [Header] for the HTTP request. If the [requiresAuthToken] indicator\r\n         * is true, the request will use the current Authorization security token.\r\n         * @param isSecure\r\n         */\r\n    HttpBaseService.prototype.createHeader = /**\r\n         * Use to create a [Header] for the HTTP request. If the [requiresAuthToken] indicator\r\n         * is true, the request will use the current Authorization security token.\r\n         * @param isSecure\r\n         */\r\n    function (requiresAuthToken) {\r\n        this.loggingService.log(this.serviceName, Severity.Information, \"Preparing to create header for the HTTP request. RequiresAuthToken: \" + requiresAuthToken + \".\");\r\n        var headers = new Headers({ 'Content-Type': 'application/json' });\r\n        if (requiresAuthToken) {\r\n            // create header request with security token;\r\n            headers.append('Authorization', \"Bearer \" + this.accessToken);\r\n        }\r\n        return headers;\r\n    };\r\n    /**\r\n     * Use to create a new instance of a [RequestOptions] object.\r\n     * See RequestOptions: https://angular.io/docs/ts/latest/api/http/index/RequestOptions-class.html\r\n     * See RequestMethod: https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html\r\n     */\r\n    /**\r\n         * Use to create a new instance of a [RequestOptions] object.\r\n         * See RequestOptions: https://angular.io/docs/ts/latest/api/http/index/RequestOptions-class.html\r\n         * See RequestMethod: https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html\r\n         */\r\n    HttpBaseService.prototype.createRequestOptions = /**\r\n         * Use to create a new instance of a [RequestOptions] object.\r\n         * See RequestOptions: https://angular.io/docs/ts/latest/api/http/index/RequestOptions-class.html\r\n         * See RequestMethod: https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html\r\n         */\r\n    function (method, headers, url, body) {\r\n        this.loggingService.log(this.serviceName, Severity.Information, \"Preparing to create request options for the HTTP request.\");\r\n        return new RequestOptions({\r\n            method: method,\r\n            headers: headers,\r\n            url: url,\r\n            body: body\r\n        });\r\n    };\r\n    /**\r\n     * Use to execute an HTTP request using the specified header and URL.\r\n     * See Request: https://angular.io/docs/ts/latest/api/http/index/Request-class.html\r\n     */\r\n    /**\r\n         * Use to execute an HTTP request using the specified header and URL.\r\n         * See Request: https://angular.io/docs/ts/latest/api/http/index/Request-class.html\r\n         */\r\n    HttpBaseService.prototype.executeRequest = /**\r\n         * Use to execute an HTTP request using the specified header and URL.\r\n         * See Request: https://angular.io/docs/ts/latest/api/http/index/Request-class.html\r\n         */\r\n    function (requestOptions) {\r\n        var _this = this;\r\n        this.loggingService.log(this.serviceName, Severity.Information, \"Preparing to execute HTTP request. Url: \" + requestOptions.url + \", Method: \" + requestOptions.method);\r\n        return this.http.request(new Request(requestOptions))\r\n            .map(function (response) { return response.json(); }) // maps the observable response to a JSON object;\r\n            .catch(function (error) { return _this.handleHttpError(error, requestOptions); }); // use to handle any exception during service call;\r\n        //.cache(); // use [cache] to eliminate possibility of duplicate calls;\r\n    };\r\n    /**\r\n     * Use to handle HTTP errors when calling web api(s).\r\n     */\r\n    /**\r\n         * Use to handle HTTP errors when calling web api(s).\r\n         */\r\n    HttpBaseService.prototype.handleHttpError = /**\r\n         * Use to handle HTTP errors when calling web api(s).\r\n         */\r\n    function (error, requestOptions) {\r\n        var message = error.toString() + \" \" + requestOptions.url + \", \" + JSON.stringify(requestOptions.body);\r\n        this.loggingService.log(this.serviceName, Severity.Error, message);\r\n        if (error && error._body) {\r\n            /**\r\n                         * This is an error that contains a body - a [Response] from the application web api. Includes:\r\n                         * 1. IsSuccess\r\n                         * 2. Message\r\n                         * 3. Array of ServiceError items\r\n                         * 4. Exception (optional)\r\n                         */\r\n            try {\r\n                var response = error.json();\r\n                if (response) {\r\n                    var subject = new BehaviorSubject(response);\r\n                    return subject.asObservable();\r\n                }\r\n                else {\r\n                    // TODO: RETRIEVE ERROR DETAILS; STATUS, MESSAGE; ETC. AND PROVIDE TO HANDLER;\r\n                    return this.handleUnexpectedError(error);\r\n                }\r\n            }\r\n            catch (ex) {\r\n                var err = ex;\r\n                var errorMessage = err.name + \"; \" + err.message;\r\n                this.loggingService.log(this.serviceName, Severity.Error, errorMessage);\r\n                return this.handleUnexpectedError(err);\r\n            }\r\n        }\r\n        else {\r\n            return this.handleUnexpectedError(error);\r\n        }\r\n    };\r\n    HttpBaseService.prototype.handleUnexpectedError = function (error) {\r\n        var response = this.createErrorResponse(error);\r\n        var subject = new BehaviorSubject(response);\r\n        return subject.asObservable();\r\n    };\r\n    HttpBaseService.prototype.createErrorResponse = function (error) {\r\n        var message = 'Unexpected error while processing response.';\r\n        var response = new ErrorResponse();\r\n        if (error instanceof Error) {\r\n            message = error.name + \" - \" + error.message;\r\n            response.Exception = error;\r\n        }\r\n        response.Message = message;\r\n        return response;\r\n    };\r\n    HttpBaseService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpBaseService.ctorParameters = function () { return [\r\n        { type: Http, },\r\n        { type: LoggingService, },\r\n    ]; };\r\n    return HttpBaseService;\r\n}());\r\nexport { HttpBaseService };\r\n//# sourceMappingURL=http-base.service.js.map","import { BehaviorSubject } from 'rxjs';\r\nimport { MessageType } from 'angular-rules-engine';\r\nimport { ServiceContext } from 'angular-rules-engine';\r\nimport { ServiceMessage } from 'angular-rules-engine';\r\nimport { Severity } from 'buildmotion-logging';\r\nimport { ErrorResponse } from './models/error-response.model';\r\n/**\r\n * Use this class as a base for application [services]. Add and/or implement\r\n * common behavior. For example, this base service class will\r\n * always initialize a new [ServiceContext] for the specified service\r\n * instance.\r\n */\r\nvar /**\r\n * Use this class as a base for application [services]. Add and/or implement\r\n * common behavior. For example, this base service class will\r\n * always initialize a new [ServiceContext] for the specified service\r\n * instance.\r\n */\r\nServiceBase = (function () {\r\n    function ServiceBase(loggingService) {\r\n        this.loggingService = loggingService;\r\n        this.serviceInitDateTime = new Date();\r\n        /**\r\n             * Use this public property to set/retrieve the user's\r\n             * security token. Most of the web api calls will require an\r\n             * authorization token for the authenticated user.\r\n             */\r\n        this.accessToken = '';\r\n        this.serviceContext = new ServiceContext();\r\n    }\r\n    ServiceBase.prototype.extractData = function (res) {\r\n        var body = res.json();\r\n        return body.data || {};\r\n    };\r\n    /**\r\n    * Use to handle an unexpected error in the application. The error should implement\r\n    * the specified interface. The method will add a new [ServiceMessage] to the\r\n    * specified [ServiceContext].\r\n    * @param error An unexpected application error that implements the [Error] interface.\r\n    *\r\n    * interface Error {\r\n    *  name: string;\r\n    *  message: string;\r\n    *  stack?: string;\r\n    * }\r\n    */\r\n    /**\r\n         * Use to handle an unexpected error in the application. The error should implement\r\n         * the specified interface. The method will add a new [ServiceMessage] to the\r\n         * specified [ServiceContext].\r\n         * @param error An unexpected application error that implements the [Error] interface.\r\n         *\r\n         * interface Error {\r\n         *  name: string;\r\n         *  message: string;\r\n         *  stack?: string;\r\n         * }\r\n         */\r\n    ServiceBase.prototype.handleUnexpectedError = /**\r\n         * Use to handle an unexpected error in the application. The error should implement\r\n         * the specified interface. The method will add a new [ServiceMessage] to the\r\n         * specified [ServiceContext].\r\n         * @param error An unexpected application error that implements the [Error] interface.\r\n         *\r\n         * interface Error {\r\n         *  name: string;\r\n         *  message: string;\r\n         *  stack?: string;\r\n         * }\r\n         */\r\n    function (error) {\r\n        var message = new ServiceMessage(error.name, error.message)\r\n            .WithDisplayToUser(true)\r\n            .WithMessageType(MessageType.Error)\r\n            .WithSource(this.serviceName);\r\n        var logItem = message.toString() + \"; \" + error.stack;\r\n        this.loggingService.log(this.serviceName, Severity.Error, logItem);\r\n        this.serviceContext.addMessage(message);\r\n    };\r\n    /**\r\n     * Use this method to handle an error from the OAuth Provider API.\r\n     * @param error\r\n     * @param requestOptions\r\n     */\r\n    /**\r\n         * Use this method to handle an error from the OAuth Provider API.\r\n         * @param error\r\n         * @param requestOptions\r\n         */\r\n    ServiceBase.prototype.handleOAuthError = /**\r\n         * Use this method to handle an error from the OAuth Provider API.\r\n         * @param error\r\n         * @param requestOptions\r\n         */\r\n    function (error, requestOptions) {\r\n        var message = error.toString() + \" \" + requestOptions.url + \", \" + JSON.stringify(requestOptions.body);\r\n        this.loggingService.log(this.serviceName, Severity.Error, message);\r\n        if (error && error._body) {\r\n            try {\r\n                var response_1 = this.createErrorResponse(\"Unable to validate credentials.\");\r\n                var subject_1 = new BehaviorSubject(response_1);\r\n                return subject_1.asObservable();\r\n            }\r\n            catch (e) {\r\n                this.loggingService.log(this.serviceName, Severity.Error, e.toString());\r\n            }\r\n        }\r\n        // default return behavior;\r\n        var response = this.createErrorResponse(\"Unable to validate credentials.\");\r\n        var subject = new BehaviorSubject(response);\r\n        return subject.asObservable();\r\n    };\r\n    ServiceBase.prototype.createErrorResponse = function (message) {\r\n        var response = new ErrorResponse();\r\n        response.Message = message;\r\n        return response;\r\n    };\r\n    ServiceBase.prototype.finishRequest = function (sourceName) {\r\n        var _this = this;\r\n        this.loggingService.log(this.serviceName, Severity.Information, \"Request for [\" + sourceName + \"] by \" + this.serviceName + \" is complete.\");\r\n        if (this.serviceContext.hasErrors()) {\r\n            this.loggingService.log(this.serviceName, Severity.Information, \"Preparing to write out the errors.\");\r\n            this.serviceContext.Messages.filter(function (f) { return f.MessageType === MessageType.Error && f.DisplayToUser; })\r\n                .forEach(function (e) { return _this.loggingService.log(_this.serviceName, Severity.Error, e.toString()); });\r\n        }\r\n    };\r\n    return ServiceBase;\r\n}());\r\n/**\r\n * Use this class as a base for application [services]. Add and/or implement\r\n * common behavior. For example, this base service class will\r\n * always initialize a new [ServiceContext] for the specified service\r\n * instance.\r\n */\r\nexport { ServiceBase };\r\n//# sourceMappingURL=service-base.service.js.map","/**\r\n * Use this model to represent service error/message information from the\r\n * application's service APIs.\r\n *\r\n * The DisplayToUser boolean value indicates whether the message should be\r\n * displayed to the user if desired.\r\n */\r\nvar /**\r\n * Use this model to represent service error/message information from the\r\n * application's service APIs.\r\n *\r\n * The DisplayToUser boolean value indicates whether the message should be\r\n * displayed to the user if desired.\r\n */\r\nServiceError = (function () {\r\n    function ServiceError() {\r\n    }\r\n    return ServiceError;\r\n}());\r\n/**\r\n * Use this model to represent service error/message information from the\r\n * application's service APIs.\r\n *\r\n * The DisplayToUser boolean value indicates whether the message should be\r\n * displayed to the user if desired.\r\n */\r\nexport { ServiceError };\r\n//# sourceMappingURL=service-error.model.js.map","var ServiceResponse = (function () {\r\n    function ServiceResponse() {\r\n        this.Errors = new Array();\r\n    }\r\n    return ServiceResponse;\r\n}());\r\nexport { ServiceResponse };\r\n//# sourceMappingURL=service-response.model.js.map"],"names":["NgModule","CommonModule","BuildMotionLoggingModule","this","Severity","ActionResult","MessageType","Observable","CompositeRule","ServiceMessage","Action","http","Headers","RequestOptions","Request","BehaviorSubject","Injectable","Http","LoggingService","ServiceContext"],"mappings":"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"}