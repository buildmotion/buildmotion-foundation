{"version":3,"file":"business-provider-base.service.js","sourceRoot":"","sources":["../src/app/business-provider-base.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,qCAAqC,CAAC;AAErE,OAAO,EAAE,cAAc,EAAE,MAAM,6CAA6C,CAAC;AAC7E,OAAO,EAAE,cAAc,EAAE,MAAM,6CAA6C,CAAC;AAC7E,OAAO,EAAE,WAAW,EAAE,MAAM,0CAA0C,CAAC;AACvE,OAAO,EAAE,QAAQ,EAAE,MAAM,mCAAmC,CAAC;;;;;;AAO7D;;;;;AAAA;IAKI,8BAAmB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAC7C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,qDAAqD,CAAC,CAAC;KAC1H;IAED,0CAAW,GAAX,UAAY,KAAK;QAAjB,iBAaC;QAZG,IAAI,OAAO,GAAG,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC;aACtD,iBAAiB,CAAC,IAAI,CAAC;aACvB,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC;aAClC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAElC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE9E,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;YAClC,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC3E;SACJ,CAAC,CAAC;KACN;IAED,4CAAa,GAAb,UAAc,UAAkB;QAAhC,iBAOC;QANG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,kBAAgB,UAAU,aAAQ,IAAI,CAAC,WAAW,kBAAe,CAAC,CAAC;QACnI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,oCAAoC,CAAC,CAAC;YACtG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,KAAK,EAAtD,CAAsD,CAAC;iBAC3F,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAvE,CAAuE,CAAC,CAAC;SAC9F;KACJ;+BA3CL;IA4CC,CAAA;;;;;;AAhCD,gCAgCC","sourcesContent":["import { LoggingService } from 'buildmotion-logging/logging.service';\r\n\r\nimport { ServiceContext } from 'angular-rules-engine/service/ServiceContext';\r\nimport { ServiceMessage } from 'angular-rules-engine/service/ServiceMessage';\r\nimport { MessageType } from 'angular-rules-engine/service/MessageType';\r\nimport { Severity } from 'buildmotion-logging/severity.enum';\r\n\r\n/**\r\n * Use the business provider base class to access common elements of the business provider.\r\n *\r\n * serviceContext: This is initialized for each instance of a business provider - its purpose is to collect information during the processing of business logic.\r\n */\r\nexport class BusinessProviderBase {\r\n    serviceName: string;\r\n    serviceContext: ServiceContext;\r\n    accessToken: string;\r\n\r\n    constructor(public loggingService: LoggingService) {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Running constructor for the [BusinessProviderBase].`);\r\n    }\r\n\r\n    handleError(error): void {\r\n        let message = new ServiceMessage(error.name, error.message)\r\n            .WithDisplayToUser(true)\r\n            .WithMessageType(MessageType.Error)\r\n            .WithSource(this.serviceName);\r\n\r\n        this.loggingService.log(this.serviceName, Severity.Error, message.toString());\r\n\r\n        this.serviceContext.Messages.forEach(e => {\r\n            if (e.DisplayToUser) {\r\n                this.loggingService.log(this.serviceName, Severity.Error, e.toString());\r\n            }\r\n        });\r\n    }\r\n\r\n    finishRequest(sourceName: string): void {\r\n        this.loggingService.log(this.serviceName, Severity.Information, `Request for [${sourceName}] by ${this.serviceName} is complete.`);\r\n        if (this.serviceContext.hasErrors()) {\r\n            this.loggingService.log(this.serviceName, Severity.Information, `Preparing to write out the errors.`);\r\n            this.serviceContext.Messages.filter(f => f.DisplayToUser && f.MessageType === MessageType.Error)\r\n                .forEach(e => this.loggingService.log(this.serviceName, Severity.Error, e.toString()));\r\n        }\r\n    }\r\n}\r\n"]}